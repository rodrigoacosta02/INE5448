<project default="all">

    <property file="build.properties"/>

    <!-- TODO #6 Rodar testes da lib e do instrumenter -->

    <target name="compile-lib" description="compiles the state coverage lib">
        <javac srcdir="../lib/src" destdir="../lib/bin" encoding="iso-8859-1">
            <classpath>
                <pathelement location="../deps/junit-4.10.jar"/>                
            </classpath>
        </javac>
    </target>

    <target name="compile" depends="compile-lib">
        <!--<mkdir dir="bin"/>-->
        <javac srcdir="../src" destdir="../bin" debug="on" encoding="iso-8859-1">

        	<classpath>
        		<pathelement location="../deps/asm-debug-all-4.1.jar"/>
        		<pathelement location="../deps/json-simple-1.1.1.jar"/>
        		<pathelement location="../deps/junit-4.10.jar"/>
                <pathelement location="../deps/commons-io-2.4.jar"/>
        		<pathelement location="../lib/bin"/>
        	</classpath>
        </javac>
    </target>

    <property name="scova.classpath" value="../bin;../deps/asm-debug-all-4.1.jar;../deps/commons-io-2.4.jar;../deps/junit-4.10.jar;C:/Users/Aniceto/workspace/junit_original/lib/hamcrest-core-1.3.jar" />


    <echo message="${scova.classpath}" />
    <target name="instrument-all">
    	<java classname="org.scova.instrumenter.Main" fork="yes">
       <!-- <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=127.0.0.1:8888,server=y,suspend=y"/> -->
            

            <arg value="${project.input.folder}"/>
            <arg value="${project.output.folder}"/>

    		<classpath>
                <pathelement path="${scova.classpath}"/>
                
                <!-- precisa para buscar informações de classe do projeto através de reflexion --> 
                <pathelement path="${project.input.classpath}"/>


    		</classpath>
    	</java>
    </target>

    <target name="instrument-class">
        <java classname="org.scova.instrumenter.Main" fork="yes">
           <!--<jvmarg value="-agentlib:jdwp=transport=dt_socket,address=127.0.0.1:8888,server=y,suspend=y"/>-->
            

            <arg value="${project.input.folder}"/>
            <arg value="${project.output.folder}"/>
            <!-- <arg value="${target.class}"/> -->

            <!--<arg value="C:\\Users\\Aniceto\\workspace\\commons-chain-1.2-src\\target\\classes\\org\\apache\\commons\\chain\\CatalogFactory.class"/>-->

            <arg value="C:/Users/Aniceto/workspace/commons-logging-1.2-src/commons-logging-1.2-src/target/classes/org/apache/commons/logging/LogFactory.class"/>

            

            

            <classpath>
                <pathelement path="${scova.classpath}"/>
                
                <!-- precisa para buscar informações de classe do projeto através de reflexion --> 
                <pathelement path="${project.input.classpath}"/>


            </classpath>
        </java>
    </target>

    <target name="clean">
        <delete dir="../bin"/>
        <mkdir dir="../bin" />
    </target>   

    <target name="run-sample-class">
     
        <java classname="org.junit.runner.JUnitCore">

            <!-- put your tests here -->
            
            <arg value="org.scova.instrumenter.SampleClass"/>

            <classpath>
                <pathelement path="${scova.classpath}"/>
                <pathelement location="../lib/bin"/>
            </classpath>

        </java>       
    </target>

    <target name="run">
     
    	<java classname="org.junit.runner.JUnitCore" fork="yes">

            <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=127.0.0.1:8888,server=y,suspend=y"/>

    		<!-- put your tests here -->
    		<!--<arg value="test.net.douglashiura.picon.TestPiconAtributoEntidade"/>-->
            <!--<arg value="test.net.douglashiura.picon.TestePiconEscolha"/>-->

            <!--<arg value="${TEST}"/>_-->

            <arg value="org.apache.commons.chain.generic.LookupCommandTestCase"/>

            
    		<!-- end -->

            <classpath refid="project.output.classpath.id"/>    	
    	</java>       
    </target>

    <echo message="{project.output.classpath}: " />
    <echo message="${project.output.classpath}"/>

    <echo message="{project.input.classpath}: " />
    <echo message="${project.input.classpath}"/>

    <echo message="{project.input.folder}: " />
    <echo message="${project.input.folder}"/>

    <echo message="{project.output.folder}: " />
    <echo message="${project.output.folder}"/>

    <echo message="{test.home}: " />
    <echo message="${test.home}"/>

    <path id="project.output.classpath.id">
        <pathelement path="${project.output.classpath}"/>
        <!-- scova lib -->
        <pathelement location="../lib/bin" /> 
        <!-- junit -->
        <pathelement location="../deps/junit-4.10.jar"/>

    </path>

    <!--<property name="test.home" value="c:/sc/sc_picon" />-->


    <target name="run-batch">

        <junit printsummary="withOutAndErr" fork="yes" showoutput="yes" haltonfailure="off" >
            <jvmarg value="-Duser.dir=${project.output.folder}"/>
            <!--<jvmarg value="-agentlib:jdwp=transport=dt_socket,address=127.0.0.1:8888,server=y,suspend=y"/>-->
             

            <classpath refid="project.output.classpath.id"/>
            <!-- If test.entry is defined, run a single test, otherwise run all valid tests -->
            <test name="${test.entry}" todir="${test.reports}" if="test.entry"/>
            <batchtest todir="${project.output.folder}" unless="test.entry">
                <fileset dir="${test.home}">
                    <include name="**/Test*.java"/>
                    <include name="**/*Test.java"/>
                    <include name="**/*Test*.java"/>
                    <exclude name="**/*Abstract*.java"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
            <!--<fail if="junit.failure" message="There were test failures."/>-->
        </junit>
    </target>

    <target name="report">
        <java classname="org.scova.reporter.html.HtmlReport">

            <arg value="${project.output.folder}"/>
            <classpath>
                <pathelement location="../bin"/>
                <pathelement location="../deps/json-simple-1.1.1.jar"/>
            </classpath>


        </java>
    </target>

    
    <target name="all" depends="clean, compile, instrument-all, run-batch"/>
    <target name="build" depends="clean, compile"/> 

    <target name="instrument" depends="clean, compile, instrument-all"/>

    <target name="all-single-class" depends="clean, compile, instrument-class, run-batch"/>
    <target name="all-report" depends="clean, compile, instrument-all, run-batch, report"/>

        

</project>